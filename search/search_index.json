{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gradsflow An AutoML Library made with Optuna and PyTorch Lightning Installation Recommended pip install -U gradsflow From source pip install git+https://github.com/gradsflow/gradsflow@main Examples Image Classification from gradsflow.autoclassifier import AutoImageClassifier from flash.core.data.utils import download_data from flash.image import ImageClassificationData # 1. Create the DataModule download_data ( \"https://pl-flash-data.s3.amazonaws.com/hymenoptera_data.zip\" , \"./data\" ) datamodule = ImageClassificationData . from_folders ( train_folder = \"data/hymenoptera_data/train/\" , val_folder = \"data/hymenoptera_data/val/\" , ) suggested_conf = dict ( optimizers = [ \"adam\" ], lr = ( 5e-4 , 1e-3 ), ) model = AutoImageClassifier ( datamodule , suggested_backbones = [ 'ssl_resnet18' ], suggested_conf = suggested_conf , max_epochs = 1 , optimization_metric = \"val_accuracy\" , timeout = 30 ) print ( \"AutoImageClassifier initialised!\" ) model . hp_tune () Text Classification from gradsflow.autoclassifier import AutoTextClassifier from flash.core.data.utils import download_data from flash.text import TextClassificationData # 1. Create the DataModule download_data ( \"https://pl-flash-data.s3.amazonaws.com/imdb.zip\" , \"./data/\" ) datamodule = TextClassificationData . from_csv ( \"review\" , \"sentiment\" , train_file = \"data/imdb/train.csv\" , val_file = \"data/imdb/valid.csv\" , backbone = \"prajjwal1/bert-medium\" , ) suggested_conf = dict ( optimizers = [ \"adam\" ], lr = ( 5e-4 , 1e-3 ), ) model = AutoTextClassifier ( datamodule , suggested_backbones = [ 'sgugger/tiny-distilbert-classification' ], suggested_conf = suggested_conf , max_epochs = 1 , optimization_metric = \"val_accuracy\" , timeout = 30 ) print ( \"AutoTextClassifier initialised!\" ) model . hp_tune ()","title":"Introduction"},{"location":"#gradsflow","text":"An AutoML Library made with Optuna and PyTorch Lightning","title":"Gradsflow"},{"location":"#installation","text":"","title":"Installation"},{"location":"#recommended","text":"pip install -U gradsflow","title":"Recommended"},{"location":"#from-source","text":"pip install git+https://github.com/gradsflow/gradsflow@main","title":"From source"},{"location":"#examples","text":"","title":"Examples"},{"location":"#image-classification","text":"from gradsflow.autoclassifier import AutoImageClassifier from flash.core.data.utils import download_data from flash.image import ImageClassificationData # 1. Create the DataModule download_data ( \"https://pl-flash-data.s3.amazonaws.com/hymenoptera_data.zip\" , \"./data\" ) datamodule = ImageClassificationData . from_folders ( train_folder = \"data/hymenoptera_data/train/\" , val_folder = \"data/hymenoptera_data/val/\" , ) suggested_conf = dict ( optimizers = [ \"adam\" ], lr = ( 5e-4 , 1e-3 ), ) model = AutoImageClassifier ( datamodule , suggested_backbones = [ 'ssl_resnet18' ], suggested_conf = suggested_conf , max_epochs = 1 , optimization_metric = \"val_accuracy\" , timeout = 30 ) print ( \"AutoImageClassifier initialised!\" ) model . hp_tune ()","title":"Image Classification"},{"location":"#text-classification","text":"from gradsflow.autoclassifier import AutoTextClassifier from flash.core.data.utils import download_data from flash.text import TextClassificationData # 1. Create the DataModule download_data ( \"https://pl-flash-data.s3.amazonaws.com/imdb.zip\" , \"./data/\" ) datamodule = TextClassificationData . from_csv ( \"review\" , \"sentiment\" , train_file = \"data/imdb/train.csv\" , val_file = \"data/imdb/valid.csv\" , backbone = \"prajjwal1/bert-medium\" , ) suggested_conf = dict ( optimizers = [ \"adam\" ], lr = ( 5e-4 , 1e-3 ), ) model = AutoTextClassifier ( datamodule , suggested_backbones = [ 'sgugger/tiny-distilbert-classification' ], suggested_conf = suggested_conf , max_epochs = 1 , optimization_metric = \"val_accuracy\" , timeout = 30 ) print ( \"AutoTextClassifier initialised!\" ) model . hp_tune ()","title":"Text Classification"},{"location":"gradsflow/autoclassifier/","text":"AutoImageClassifier Automatically finds Image Classification Model Parameters: Name Type Description Default datamodule PL Lightning DataModule with num_classes property. required max_epochs default=10. required n_trials default=100. required optimization_metric Optional[str] = None. required suggested_backbones Union[List, str, None] = None. required suggested_conf [Optional[dict] = None] This sets Trial suggestions for optimizer, learning rate, and all the hyperparameters. required timeout Hyperparameter search will stop after timeout. required Examples: suggested_conf = dict ( optimizers = [ \"adam\" ], lr = ( 5e-4 , 1e-3 ), ) model = AutoImageClassifier ( datamodule , suggested_backbones = [ 'ssl_resnet18' ], suggested_conf = suggested_conf , max_epochs = 1 , optimization_metric = \"val_accuracy\" , timeout = 30 ) model . hp_tune () AutoTextClassifier Automatically finds Text Classification Model Parameters: Name Type Description Default datamodule PL Lightning DataModule with num_classes property. required max_epochs default=10. required n_trials default=100. required optimization_metric Optional[str] = None. required suggested_backbones Union[List, str, None] = None. required suggested_conf [Optional[dict] = None] This sets Trial suggestions for optimizer, learning rate, and all the hyperparameters. required timeout Hyperparameter search will stop after timeout. required Examples: suggested_conf = dict ( optimizers = [ \"adam\" ], lr = ( 5e-4 , 1e-3 ), ) model = AutoTextClassifier ( datamodule , suggested_backbones = [ 'sgugger/tiny-distilbert-classification' ], suggested_conf = suggested_conf , max_epochs = 1 , optimization_metric = \"val_accuracy\" , timeout = 30 ) model . hp_tune ()","title":"AutoClassifier"},{"location":"gradsflow/autoclassifier/#gradsflow.autoclassifier.image.AutoImageClassifier","text":"Automatically finds Image Classification Model Parameters: Name Type Description Default datamodule PL Lightning DataModule with num_classes property. required max_epochs default=10. required n_trials default=100. required optimization_metric Optional[str] = None. required suggested_backbones Union[List, str, None] = None. required suggested_conf [Optional[dict] = None] This sets Trial suggestions for optimizer, learning rate, and all the hyperparameters. required timeout Hyperparameter search will stop after timeout. required Examples: suggested_conf = dict ( optimizers = [ \"adam\" ], lr = ( 5e-4 , 1e-3 ), ) model = AutoImageClassifier ( datamodule , suggested_backbones = [ 'ssl_resnet18' ], suggested_conf = suggested_conf , max_epochs = 1 , optimization_metric = \"val_accuracy\" , timeout = 30 ) model . hp_tune ()","title":"AutoImageClassifier"},{"location":"gradsflow/autoclassifier/#gradsflow.autoclassifier.text.AutoTextClassifier","text":"Automatically finds Text Classification Model Parameters: Name Type Description Default datamodule PL Lightning DataModule with num_classes property. required max_epochs default=10. required n_trials default=100. required optimization_metric Optional[str] = None. required suggested_backbones Union[List, str, None] = None. required suggested_conf [Optional[dict] = None] This sets Trial suggestions for optimizer, learning rate, and all the hyperparameters. required timeout Hyperparameter search will stop after timeout. required Examples: suggested_conf = dict ( optimizers = [ \"adam\" ], lr = ( 5e-4 , 1e-3 ), ) model = AutoTextClassifier ( datamodule , suggested_backbones = [ 'sgugger/tiny-distilbert-classification' ], suggested_conf = suggested_conf , max_epochs = 1 , optimization_metric = \"val_accuracy\" , timeout = 30 ) model . hp_tune ()","title":"AutoTextClassifier"},{"location":"gradsflow/automodel/","text":"AutoModel Creates Optuna instance and suggested objects from hparams hp_tune ( self ) Search Hyperparameter and builds model with the best params Returns: Type Description sets self.model to the best model. Source code in gradsflow/automodel/automodel.py def hp_tune ( self ): \"\"\" Search Hyperparameter and builds model with the best params Returns: sets `self.model` to the best model. \"\"\" self . study . optimize ( self . _objective , n_trials = self . n_trials , timeout = self . timeout ) self . model = self . build_model ( ** self . study . best_params )","title":"AutoModel"},{"location":"gradsflow/automodel/#gradsflow.automodel.automodel.AutoModel","text":"Creates Optuna instance and suggested objects from hparams","title":"AutoModel"},{"location":"gradsflow/automodel/#gradsflow.automodel.automodel.AutoModel.hp_tune","text":"Search Hyperparameter and builds model with the best params Returns: Type Description sets self.model to the best model. Source code in gradsflow/automodel/automodel.py def hp_tune ( self ): \"\"\" Search Hyperparameter and builds model with the best params Returns: sets `self.model` to the best model. \"\"\" self . study . optimize ( self . _objective , n_trials = self . n_trials , timeout = self . timeout ) self . model = self . build_model ( ** self . study . best_params )","title":"hp_tune()"}]}